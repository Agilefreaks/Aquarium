#find types and their descendents and ancestors, subtracting out excluded types and their descendents and ancestors, specified using regular expressions should find the matching types and their descendents and ancestors, minus the excluded types and their descendents and ancestors.
#find types and their descendents and ancestors, specified with regular expressions should find the matching types and their descendents and ancestors, even in different nested modules.
#find types subtracting out excluded types and their descendents and ancestors should find the matching types and their descendents and ancestors, minus the excluded types and their descendents and ancestors.
#find types and their descendents and ancestors should find the matching types and their descendents and ancestors, even in different nested modules.
#find types subtracting out excluded types and descendents, using :exclude_types_and_descendents should find the matching types and their descendent subclasses, minus the excluded type hierarchies.
#find types and their descendents, using :types_and_descendents should find the matching types and their descendent subclasses, even in different nested modules.
Aquarium::Utils::TypeUtils.descendents applied to JRuby-wrapped Java classes should properly determine descendents
Aquarium::Utils::TypeUtils.descendents called with a module should return all modules that include a module
Aquarium::Utils::TypeUtils.descendents called with a module should return all classes and their descendents that include a module
Aquarium::Utils::TypeUtils.descendents called with a module should return the module itself in the result
Aquarium::Utils::TypeUtils.descendents called with a class should return all classes and their descendents that derive from a class
Aquarium::Utils::TypeUtils.descendents called with a class should return just the class if it has no descendents
Aquarium::Utils::TypeUtils.descendents called with a class should return the class itself in the result
