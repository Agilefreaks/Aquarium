Aquarium::Finders::TypeFinder#find regexps with :names_and_ancestors and :names_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find regexps with :name_and_ancestors and :name_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find regexps with :types_and_ancestors and :types_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find regexps with :type_and_ancestors and :type_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :names_and_ancestors and :names_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :name_and_ancestors and :name_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :types_and_ancestors and :types_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :type_and_ancestors and :type_and_descendents used to specify one or more names should find the matching types, including their descendents and ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :names_and_ancestors used to specify one or more names should find the matching types and their ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :name_and_ancestors used to specify one or more names should find the matching types and their ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :types_and_ancestors used to specify one or more names should find the matching types and their ancestors, even in different nested modules.
Aquarium::Finders::TypeFinder#find with :type_and_ancestors used to specify one or more names should find the matching types and their ancestors, even in different nested modules.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude join_points whose types match an excluded descendent types.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude classes specified and their including modules and descendent classes when excluding descendents.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude join_points whose types match an excluded descendent modules.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude modules specified and their including modules and classes when excluding descendents.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude join_points whose types match an excluded ancestor modules.
Aquarium::Aspects::Pointcut (exclude types and their descendents and ancestors) should exclude modules specified and their included modules when excluding ancestors.
Aquarium::Aspects::Pointcut (types and their descendents and ancestors) should match classes specified and their ancestor and descendent modules and classes.
