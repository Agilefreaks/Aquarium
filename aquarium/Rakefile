$:.unshift('lib')
require 'rubygems'
require 'rake'
require 'rake/gempackagetask'
require 'rake/contrib/rubyforgepublisher'
require 'rake/clean'
require 'rake/rdoctask'
require 'aquarium/version'

# Use RSpec's files.
require 'spec/rake/spectask'
require 'spec/rake/verify_rcov'

# Some of the tasks are in separate files since they are also part of the website documentation
load File.dirname(__FILE__) + '/rake_tasks/examples.rake'
load File.dirname(__FILE__) + '/rake_tasks/verify_rcov.rake'

PKG_NAME = "aquarium"
PKG_VERSION   = Aquarium::VERSION::STRING
PKG_FILE_NAME = "#{PKG_NAME}-#{PKG_VERSION}"
PKG_FILES = FileList[
  '[A-Z]*',
  'lib/**/*.rb', 
  'spec/**/*.rb', 
  'examples/**/*.rb',
  'rake_tasks/**/*.rake'
]
FileUtils.touch(File.dirname(__FILE__) + '/previous_failures.txt')

task :default => [:verify_rcov]

desc "Run all specs"
Spec::Rake::SpecTask.new do |t|
  t.spec_files = FileList['spec/**/*_spec.rb', 'examples/**/*_spec.rb']
  t.spec_opts = ['--options', 'spec.opts']
  t.rcov = true
  t.rcov_dir = '../doc/output/coverage'
  t.rcov_opts = ['--exclude', 'examples']
end

desc "Run all specs and store html output in doc/output/report.html"
Spec::Rake::SpecTask.new('spec_html') do |t|
  t.spec_files = FileList['spec/**/*_spec.rb', 'examples/**/*_spec.rb']
  t.spec_opts = ['--format html:../doc/output/report.html','--backtrace']
end

desc "Run all specs without rcov"
Spec::Rake::SpecTask.new('spec_no_rcov') do |t|
  t.spec_files = FileList['spec/**/*_spec.rb', 'examples/**/*_spec.rb']
  t.spec_opts = ['--colour']
end

desc 'Generate HTML documentation for website'
task :webgen do
  Dir.chdir '../doc' do
    output = nil
    IO.popen('webgen 2>&1') do |io|
      output = io.read
    end
    raise "ERROR while running webgen: #{output}" if output =~ /ERROR/n || $? != 0
  end
end

desc 'Generate RDoc'
rd = Rake::RDocTask.new do |rdoc|
  rdoc.rdoc_dir = '../doc/output/rdoc'
  rdoc.options << '--title' << 'Aquarium' << '--line-numbers' << '--inline-source' << '--main' << 'README'
  rdoc.rdoc_files.include('README', 'CHANGES', 'MIT-LICENSE', 'examples/**/*.rb', 'UPGRADE', 'lib/**/*.rb') # 'EXAMPLES.rd'
end

# desc "Generate EXAMPLES.rb"
# task :rdoc do
#   core.rdoc
# end

aquarium = Gem::Specification.new do |s|
  s.name = PKG_NAME
  s.version = PKG_VERSION
  s.summary = Aquarium::VERSION::DESCRIPTION
  s.description = <<-EOF
    Aquarium is a full-featured Aspect-Oriented Programming (AOP) framework for Ruby that is 
    designed to provide an intuitive syntax and support for large-scale, dynamic aspects.
  EOF

  s.files = PKG_FILES.to_a
  s.require_path = 'lib'

  s.has_rdoc = true
  s.rdoc_options = rd.options
  s.extra_rdoc_files = rd.rdoc_files.reject { |fn| fn =~ /\.rb$|^EXAMPLES.rd$/ }.to_a
  
  s.autorequire = 'aquarium'
  s.bindir = 'bin'
  s.executables = []
  s.default_executable = ''
  s.authors = ["Aquarium Development Team"]
  s.email = "aquarium-devel@rubyforge.org"
  s.homepage = "http://aquarium.rubyforge.org"
  s.rubyforge_project = "aquarium"
end

Rake::GemPackageTask.new(aquarium) do |pkg|
  pkg.need_zip = true
  pkg.need_tar = true
end

def egrep(pattern)
  Dir['**/*.rb'].each do |fn|
    count = 0
    open(fn) do |f|
      while line = f.gets
        count += 1
        if line =~ pattern
          puts "#{fn}:#{count}:#{line}"
        end
      end
    end
  end
end

desc "Look for TODO and FIXME tags in the code"
task :todo do
  egrep /(FIXME|TODO|TBD)/
end

task :clobber do
  rm_rf '../doc/output'
  rm_rf 'translated_specs'
end

task :release => [:clobber, :verify_committed, :verify_user, :spec, :publish_packages, :tag, :publish_website, :publish_news]

desc "Verifies that there is no uncommitted code"
task :verify_committed do
  IO.popen('svn stat') do |io|
    io.each_line do |line|
      raise "\n!!! Do a svn commit first !!!\n\n" if line =~ /^\s*M\s*/
    end
  end
end

desc "Creates a tag in svn"
task :tag do
  from = `svn info #{File.dirname(__FILE__)}`.match(/URL: (.*)\/aquarium/n)[1]
  to = from.gsub(/trunk/, "tags/#{Aquarium::VERSION::TAG}")
  tag_cmd = "svn cp #{from} #{to} -m \"Tag release #{Aquarium::VERSION::FULL_VERSION}\""
  raise "Can't tag to the same place: #{tag_cmd}" if to == from
  puts "Creating tag in SVN"
  `#{tag_cmd}`
  raise "Tagging failed" unless $? == 0
end

# TODO: adapt from rspec.
# desc "Run this task before you commit. You should see 'OK TO COMMIT'"
# task :pre_commit => [
#   :website,
#   :examples
# ]

desc "Build the website, but do not publish it"
task :website => [:clobber, :verify_rcov, :verify_jruby, :spec_html, :webgen, :rdoc]

task :rdoc_rails do
  Dir.chdir '../aquarium_on_rails' do
    rake = (PLATFORM == "i386-mswin32") ? "rake.cmd" : "rake"
    `#{rake} rdoc`
  end
end

desc "Verify that the Aquarium specs run under JRuby and that JRuby can advise Java types"
task :verify_jruby do
  puts "Verifying JRuby Support"
  Dir.chdir 'jruby' do
    rake = (PLATFORM == "i386-mswin32") ? "rake.cmd" : "rake"
    sh "jruby -S #{rake}"
  end
end
    

task :verify_user do
  raise "RUBYFORGE_USER environment variable not set!" unless ENV['RUBYFORGE_USER']
end

desc "Upload Website to RubyForge"
task :publish_website => [:verify_user, :website] do
  unless Aquarium::VERSION::RELEASE_CANDIDATE
    # host = "aquarium-website@rubyforge.org"
    host = "#{ENV['RUBYFORGE_USER']}@rubyforge.org"
    publisher = Rake::SshDirPublisher.new(
      "#{host}",
      "/var/www/gforge-projects/#{PKG_NAME}",
      "../doc/output"
    )
    publisher.upload
  else
    puts "** Not publishing packages to RubyForge - this is a prerelease"
  end
end

desc "Upload Website archive to RubyForge"
task :archive_website => [:verify_user, :website] do
  # host = "aquarium-website@rubyforge.org"
  host = "#{ENV['RUBYFORGE_USER']}@rubyforge.org"
  publisher = Rake::SshDirPublisher.new(
    "#{host}",
    "/var/www/gforge-projects/#{PKG_NAME}/#{Spec::VERSION::TAG}",
    "../doc/output"
  )
  publisher.upload
end

desc "Publish gem+tgz+zip on RubyForge. You must make sure lib/version.rb is aligned with the CHANGELOG file"
task :publish_packages => [:verify_user, :package] do
  release_files = FileList[
    "pkg/#{PKG_FILE_NAME}.gem",
    "pkg/#{PKG_FILE_NAME}.tgz",
    "pkg/#{PKG_FILE_NAME}.zip"
  ]
  unless Aquarium::VERSION::RELEASE_CANDIDATE
    require 'meta_project'
    require 'rake/contrib/xforge'

    Rake::XForge::Release.new(MetaProject::Project::XForge::RubyForge.new(PKG_NAME)) do |xf|
      # Never hardcode user name and password in the Rakefile!
      xf.user_name = ENV['RUBYFORGE_USER']
      xf.files = release_files.to_a
      xf.release_name = "Aquarium #{PKG_VERSION}"
    end
  else
    puts "SINCE THIS IS A PRERELEASE, FILES ARE UPLOADED WITH SSH, NOT TO THE RUBYFORGE FILE SECTION"
    puts "YOU MUST TYPE THE PASSWORD #{release_files.length} TIMES..."

    # host = "aquarium-website@rubyforge.org"
    host = "#{ENV['RUBYFORGE_USER']}@rubyforge.org"
    remote_dir = "/var/www/gforge-projects/#{PKG_NAME}"

    publisher = Rake::SshFilePublisher.new(
      host,
      remote_dir,
      File.dirname(__FILE__),
      *release_files
    )
    publisher.upload
    
    puts "UPLADED THE FOLLOWING FILES:"
    release_files.each do |file|
      name = file.match(/pkg\/(.*)/)[1]
      puts "* http://aquarium.rubyforge.org/#{name}"
    end

    puts "They are not linked to anywhere, so don't forget to tell people!"
  end
end

desc "Publish news on RubyForge"
task :publish_news => [:verify_user] do
  unless Aquarium::VERSION::RELEASE_CANDIDATE
    require 'meta_project'
    require 'rake/contrib/xforge'
    Rake::XForge::NewsPublisher.new(MetaProject::Project::XForge::RubyForge.new(PKG_NAME)) do |news|
      # Never hardcode user name and password in the Rakefile!
      news.user_name = ENV['RUBYFORGE_USER']
    end
  else
    puts "** Not publishing news to RubyForge - this is a prerelease"
  end
end
